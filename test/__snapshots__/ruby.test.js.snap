// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alias.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

alias a b # first

alias c d

alias $e $f # rubocop:disable Style/GlobalVars
"
`;

exports[`alias.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

alias a b # first

alias c d

alias $e $f # rubocop:disable Style/GlobalVars
"
`;

exports[`array.rb matches expected output for off.json 1`] = `
"[]

[1, 2, 3]

[\\"a\\", \\"b\\", \\"c\\"]

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  ]
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
] =
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]
"
`;

exports[`array.rb matches expected output for on.json 1`] = `
"[]

[1, 2, 3]

['a', 'b', 'c']

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  ]
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
] =
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]
"
`;

exports[`assign.rb matches expected output for off.json 1`] = `
"a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *[1, 2, 3]

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_super_super_long, super_super_super_super_super_long, super_super_super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

a = {
  :a =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :b =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :c =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}

a = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
].sort

a = {
  :a =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :b =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}.sort

a.a = 1

super_super_super_super_super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
"
`;

exports[`assign.rb matches expected output for on.json 1`] = `
"a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *[1, 2, 3]

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_super_super_long, super_super_super_super_super_long, super_super_super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

a = {
  a:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  b:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  c:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}

a = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
].sort

a = {
  a:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  b:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}.sort

a.a = 1

super_super_super_super_super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
"
`;

exports[`binary.rb matches expected output for off.json 1`] = `
"a && b && c && d

super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long
"
`;

exports[`binary.rb matches expected output for on.json 1`] = `
"a && b && c && d

super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long
"
`;

exports[`blocks.rb matches expected output for off.json 1`] = `
"loop { 1 }

loop { 1 }

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| 1 }

loop { |i| i }

loop { |*| i }

loop { |(a, b)| i }

loop { |a, (b, c), d, *e| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop(&:i)

loop(&:i)

loop { |i, j| i.to_s }

[1, 2, 3].each do |i|
  p i
end

target.method object.map { |arg| arg * 2 }
"
`;

exports[`blocks.rb matches expected output for on.json 1`] = `
"loop { 1 }

loop { 1 }

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| 1 }

loop { |i| i }

loop { |*| i }

loop { |(a, b)| i }

loop { |a, (b, c), d, *e| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop(&:i)

loop(&:i)

loop { |i, j| i.to_s }

[1, 2, 3].each do |i|
  p i
end

target.method object.map { |arg| arg * 2 }
"
`;

exports[`break.rb matches expected output for off.json 1`] = `
"break

break 1

break(1)

break 1, 2
"
`;

exports[`break.rb matches expected output for on.json 1`] = `
"break

break 1

break(1)

break 1, 2
"
`;

exports[`case.rb matches expected output for off.json 1`] = `
"case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end
"
`;

exports[`case.rb matches expected output for on.json 1`] = `
"case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end
"
`;

exports[`class.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    class Object; end

    class Object; end

    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      attr_accessor :bar
    end

    class << self
      def method; end

      undef method
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = \\"config\\"

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = \\"config\\"
"
`;

exports[`class.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    class Object; end

    class Object; end

    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      attr_accessor :bar
    end

    class << self
      def method; end

      undef method
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = 'config'

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = 'config'
"
`;

exports[`defined.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third
"
`;

exports[`defined.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third
"
`;

exports[`hash.rb matches expected output for off.json 1`] = `
"{}

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ Foo => 1, Bar => 2 }

{
  :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long => {
    :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long =>
      super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  }
}
"
`;

exports[`hash.rb matches expected output for on.json 1`] = `
"{}

{ a: 'a', b: 'b', c: 'c' }

{ a: 'a', b: 'b', c: 'c' }

{ Foo => 1, Bar => 2 }

{
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long: {
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long:
      super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  }
}
"
`;

exports[`hooks.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true
# rubocop:disable Style/BeginBlock

BEGIN { p \\"begin\\" } # first

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long # second
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
} # third

END { p \\"end\\" } # fourth

END {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long # fifth
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
} # sixth
"
`;

exports[`hooks.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true
# rubocop:disable Style/BeginBlock

BEGIN { p 'begin' } # first

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long # second
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
} # third

END { p 'end' } # fourth

END {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long # fifth
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
} # sixth
"
`;

exports[`if.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse

unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

if a
  1
end

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

unless a
  1
end

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
"
`;

exports[`if.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse

unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

1 if a

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

1 unless a

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
"
`;

exports[`kwargs.rb matches expected output for off.json 1`] = `
"def foo(a:, b:, c: 1, d: 2)
  a + b + c + d
end

foo(:a => 1, :b => 2, :c => 3, :d => 4)

hash = { :a => 1, :b => 2, :c => 3 }
foo(**hash, :d => 4)
"
`;

exports[`kwargs.rb matches expected output for on.json 1`] = `
"def foo(a:, b:, c: 1, d: 2)
  a + b + c + d
end

foo(a: 1, b: 2, c: 3, d: 4)

hash = { a: 1, b: 2, c: 3 }
foo(**hash, d: 4)
"
`;

exports[`lambda.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }
"
`;

exports[`lambda.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }
"
`;

exports[`layout.rb matches expected output for off.json 1`] = `
"1.0

def foobar
  :a

  \\"b\\"
  1
  2

  3
end

2
3
4

5
"
`;

exports[`layout.rb matches expected output for on.json 1`] = `
"1.0

def foobar
  :a

  'b'
  1
  2

  3
end

2
3
4

5
"
`;

exports[`method.rb matches expected output for off.json 1`] = `
"def foo; end

def foo(); end

def foo a; end

def foo(a); end

def self.foo; end

def self.foo(); end

def self.foo a; end

def self.foo(a); end

def foo(super_super_super_super_super_super_super_super_super_super_super_super_super_super_long); end

def foo(a, b, c, super_super_super_super_super_super_super_super_super_super_super_super_super_super_long)
  \\"what\\"
end

def foo(a, b, c = 1, d = 2, *e, f, g, h:, i:, j: 1, k: 2, **l, &block)
  \\"what\\"
end

def foo(a)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(:h => 1, **bar)
foo(**bar, :h => 1)
foo(:h => 1, **bar, :i => 2)
"
`;

exports[`method.rb matches expected output for on.json 1`] = `
"def foo; end

def foo(); end

def foo a; end

def foo(a); end

def self.foo; end

def self.foo(); end

def self.foo a; end

def self.foo(a); end

def foo(super_super_super_super_super_super_super_super_super_super_super_super_super_super_long); end

def foo(a, b, c, super_super_super_super_super_super_super_super_super_super_super_super_super_super_long)
  'what'
end

def foo(a, b, c = 1, d = 2, *e, f, g, h:, i:, j: 1, k: 2, **l, &block)
  'what'
end

def foo(a)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(h: 1, **bar)
foo(**bar, h: 1)
foo(h: 1, **bar, i: 2)
"
`;

exports[`next.rb matches expected output for off.json 1`] = `
"next

next 1

next (1)
"
`;

exports[`next.rb matches expected output for on.json 1`] = `
"next

next 1

next (1)
"
`;

exports[`numbers.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb # this is actually octal
0o377
-0b1010
0b001_001 # these are CHARs
\\"a\\"
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

# rubocop:enable Lint/Void
"
`;

exports[`numbers.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb # this is actually octal
0o377
-0b1010
0b001_001 # these are CHARs
'a'
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

# rubocop:enable Lint/Void
"
`;

exports[`ranges.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`ranges.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`regexp.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

/abc/

%r{a/b/c}

/abc/

/abc/

/abc/

/abc/

/a#{b}c/

/abc/

/abc/

/#{$&}/

# rubocop:enable Lint/Void
"
`;

exports[`regexp.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

/abc/

%r{a/b/c}

/abc/

/abc/

/abc/

/abc/

/a#{b}c/

/abc/

/abc/

/#{$&}/

# rubocop:enable Lint/Void
"
`;

exports[`rescue.rb matches expected output for off.json 1`] = `
"begin
  1
rescue StandardError
  retry
rescue NoMethodError => exception
  redo
rescue StandardError, NoMethodError
  2
rescue
  3
else
  4
ensure
  5
end

a rescue nil
"
`;

exports[`rescue.rb matches expected output for on.json 1`] = `
"begin
  1
rescue StandardError
  retry
rescue NoMethodError => exception
  redo
rescue StandardError, NoMethodError
  2
rescue
  3
else
  4
ensure
  5
end

a rescue nil
"
`;

exports[`return.rb matches expected output for off.json 1`] = `
"return

return 1

return (1)
"
`;

exports[`return.rb matches expected output for on.json 1`] = `
"return

return 1

return (1)
"
`;

exports[`strings.rb matches expected output for off.json 1`] = `
"\\"\\"

\\"abc\\"

\\"abc\\"

\\"#{abc}\\"

\\"abc #{de} fghi #{jkl} mno\\"

\\"abc\\" \\\\
  \\"def\\" \\\\
  \\"ghi\\"

\\"abc #{\\"abc\\"}\\"

{ \\"a\\" => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

%x[abc]

%x[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]
"
`;

exports[`strings.rb matches expected output for on.json 1`] = `
"''

'abc'

'abc'

\\"#{abc}\\"

\\"abc #{de} fghi #{jkl} mno\\"

'abc' \\\\
  'def' \\\\
  'ghi'

\\"abc #{'abc'}\\"

{ 'a' => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

%x[abc]

%x[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]
"
`;

exports[`super.rb matches expected output for off.json 1`] = `
"super

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`super.rb matches expected output for on.json 1`] = `
"super

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`while.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

while a
  1
end

while a
  1
end

while super_super_super_super_super_super_super_super_super_super_super_long
  1
end

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

until a
  1
end

until a
  1
end

until super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`while.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

1 while a

1 while a

1 while super_super_super_super_super_super_super_super_super_super_super_long

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

1 until a

1 until a

1 until super_super_super_super_super_super_super_super_super_super_super_long

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`yield.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;

exports[`yield.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;
