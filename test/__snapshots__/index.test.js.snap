// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.rb matches expected output for off.json 1`] = `
"[]
[1, 2, 3]

[\\"a\\", \\"b\\", \\"c\\"]

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  ]
]
"
`;

exports[`array.rb matches expected output for on.json 1`] = `
"[]
[1, 2, 3]

['a', 'b', 'c']

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  ]
]
"
`;

exports[`assign.rb matches expected output for off.json 1`] = `
"a = 1

b =
  begin
    2
  end

c, d, e = [1, 2, 3]

f = 1, 2, 3

g, h, i = 1, 2, 3

j, *k = 1, 2, 3

l, *m, n, o = 1, 2, 3

q = *[1, 2, 3]

(r, s), t = [1, 2], 3

u ||= 1

v ||=
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

w = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

x = {
  :a =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :b =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :c =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}
"
`;

exports[`assign.rb matches expected output for on.json 1`] = `
"a = 1

b =
  begin
    2
  end

c, d, e = [1, 2, 3]

f = 1, 2, 3

g, h, i = 1, 2, 3

j, *k = 1, 2, 3

l, *m, n, o = 1, 2, 3

q = *[1, 2, 3]

(r, s), t = [1, 2], 3

u ||= 1

v ||=
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long

w = [
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
]

x = {
  a:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  b:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  c:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
}
"
`;

exports[`binary.rb matches expected output for off.json 1`] = `
"a && b && c && d

super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long
"
`;

exports[`binary.rb matches expected output for on.json 1`] = `
"a && b && c && d

super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long &&
  super_super_super_super_super_super_super_super_super_long
"
`;

exports[`blocks.rb matches expected output for off.json 1`] = `
"loop { 1 }

loop { 1 }

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| 1 }

loop { |i| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop(&:i)

loop(&:i)

[1, 2, 3].each do |i|
  p i
end

target.method object.map { |arg| arg * 2 }
"
`;

exports[`blocks.rb matches expected output for on.json 1`] = `
"loop { 1 }

loop { 1 }

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop { |i| 1 }

loop { |i| i }

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop(&:i)

loop(&:i)

[1, 2, 3].each do |i|
  p i
end

target.method object.map { |arg| arg * 2 }
"
`;

exports[`case.rb matches expected output for off.json 1`] = `
"case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end
"
`;

exports[`case.rb matches expected output for on.json 1`] = `
"case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end
"
`;

exports[`class.rb matches expected output for off.json 1`] = `
"module Pret
  module Tier
    class Object; end

    class Object; end

    class Object < BasicObject; end

    class Object < BasicObject; end
  end
end

Pret::Tier::Object
::Pret::Tier::Object
"
`;

exports[`class.rb matches expected output for on.json 1`] = `
"module Pret
  module Tier
    class Object; end

    class Object; end

    class Object < BasicObject; end

    class Object < BasicObject; end
  end
end

Pret::Tier::Object
::Pret::Tier::Object
"
`;

exports[`hash.rb matches expected output for off.json 1`] = `
"{}
{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }
{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }
{ Foo => 1, Bar => 2 }
{
  :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long =>
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long => {
    :super_super_super_super_super_super_super_super_super_super_super_super_super_super_long =>
      super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  }
}
"
`;

exports[`hash.rb matches expected output for on.json 1`] = `
"{}
{ a: 'a', b: 'b', c: 'c' }
{ a: 'a', b: 'b', c: 'c' }
{ Foo => 1, Bar => 2 }
{
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long:
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long: {
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long:
      super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  }
}
"
`;

exports[`if.rb matches expected output for off.json 1`] = `
"if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
end

if super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

unless a
  1
end

unless super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2

if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end
"
`;

exports[`if.rb matches expected output for on.json 1`] = `
"if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end

1 if a

if super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

1 unless a

unless super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2

if a
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
end
"
`;

exports[`kwargs.rb matches expected output for off.json 1`] = `
"def foo(a:, b:, c: 1, d: 2)
  a + b + c + d
end

foo(:a => 1, :b => 2, :c => 3, :d => 4)

hash = { :a => 1, :b => 2, :c => 3 }
foo(**hash, :d => 4)
"
`;

exports[`kwargs.rb matches expected output for on.json 1`] = `
"def foo(a:, b:, c: 1, d: 2)
  a + b + c + d
end

foo(a: 1, b: 2, c: 3, d: 4)

hash = { a: 1, b: 2, c: 3 }
foo(**hash, d: 4)
"
`;

exports[`lambda.rb matches expected output for off.json 1`] = `
"-> { 1 }

a = -> { 1 }

b = ->(a, b, c) { a + b + c }

c =
  lambda do
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  end

d =
  lambda do |a, b, c|
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  end

a.(1, 2, 3)

a.call(1, 2, 3)

a[1, 2, 3]

-> a { 1 }

->() { 1 }
"
`;

exports[`lambda.rb matches expected output for on.json 1`] = `
"-> { 1 }

a = -> { 1 }

b = ->(a, b, c) { a + b + c }

c =
  lambda do
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  end

d =
  lambda do |a, b, c|
    super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  end

a.(1, 2, 3)

a.call(1, 2, 3)

a[1, 2, 3]

-> a { 1 }

->() { 1 }
"
`;

exports[`layout.rb matches expected output for off.json 1`] = `
"1.0

def foobar
  :a

  \\"b\\"
  1
  2

  3
end

2
3
4

5
"
`;

exports[`layout.rb matches expected output for on.json 1`] = `
"1.0

def foobar
  :a

  'b'
  1
  2

  3
end

2
3
4

5
"
`;

exports[`method.rb matches expected output for off.json 1`] = `
"def foo; end

def foo(); end

def foo a; end

def foo(a); end

def self.foo; end

def self.foo(); end

def self.foo a; end

def self.foo(a); end

def foo(super_super_super_super_super_super_super_super_super_super_super_super_super_super_long); end

def foo(a, b, c, super_super_super_super_super_super_super_super_super_super_super_super_super_super_long)
  \\"what\\"
end

def foo(a, b, c = 1, d = 2, *e, f, g, h:, i:, j: 1, k: 2, **l, &block)
  \\"what\\"
end

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(:h => 1, **bar)
foo(**bar, :h => 1)
foo(:h => 1, **bar, :i => 2)
"
`;

exports[`method.rb matches expected output for on.json 1`] = `
"def foo; end

def foo(); end

def foo a; end

def foo(a); end

def self.foo; end

def self.foo(); end

def self.foo a; end

def self.foo(a); end

def foo(super_super_super_super_super_super_super_super_super_super_super_super_super_super_long); end

def foo(a, b, c, super_super_super_super_super_super_super_super_super_super_super_super_super_super_long)
  'what'
end

def foo(a, b, c = 1, d = 2, *e, f, g, h:, i:, j: 1, k: 2, **l, &block)
  'what'
end

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(h: 1, **bar)
foo(**bar, h: 1)
foo(h: 1, **bar, i: 2)
"
`;

exports[`numbers.rb matches expected output for off.json 1`] = `
"123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb
0377
-0b1010
0b001_001
?a
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a
"
`;

exports[`numbers.rb matches expected output for on.json 1`] = `
"123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb
0377
-0b1010
0b001_001
?a
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a
"
`;

exports[`regex.rb matches expected output for off.json 1`] = `
"a = /abc/

b = %r{abc}

c = /abc/

d = %r[abc]

e = %r(abc)

f = /a#{b}c/

g = /abc/i

h = %r{abc}i
"
`;

exports[`regex.rb matches expected output for on.json 1`] = `
"a = /abc/

b = %r{abc}

c = /abc/

d = %r[abc]

e = %r(abc)

f = /a#{b}c/

g = /abc/i

h = %r{abc}i
"
`;

exports[`rescue.rb matches expected output for off.json 1`] = `
"begin
  1
rescue StandardError
  retry
rescue NoMethodError => exception
  redo
rescue
  2
else
  3
ensure
  4
end

a rescue nil
"
`;

exports[`rescue.rb matches expected output for on.json 1`] = `
"begin
  1
rescue StandardError
  retry
rescue NoMethodError => exception
  redo
rescue
  2
else
  3
ensure
  4
end

a rescue nil
"
`;

exports[`strings.rb matches expected output for off.json 1`] = `
"\\"\\"
\\"abc\\"

\\"abc\\"

\\"#{abc}\\"

\\"abc #{de} fghi #{jkl} mno\\"

\\"abc\\" \\\\
  \\"def\\" \\\\
  \\"ghi\\"

\\"abc #{\\"abc\\"}\\"
{ \\"a\\" => 1 }
{ \\"a #{a}\\" => 1 }
"
`;

exports[`strings.rb matches expected output for on.json 1`] = `
"''
'abc'

'abc'

\\"#{abc}\\"

\\"abc #{de} fghi #{jkl} mno\\"

'abc' \\\\
  'def' \\\\
  'ghi'

\\"abc #{'abc'}\\"
{ 'a' => 1 }
{ \\"a #{a}\\" => 1 }
"
`;

exports[`super.rb matches expected output for off.json 1`] = `
"super
super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`super.rb matches expected output for on.json 1`] = `
"super
super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`while.rb matches expected output for off.json 1`] = `
"while true
  1
end

while true
  1
end

while super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

while super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until true
  1
end

until true
  1
end

until super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end
"
`;

exports[`while.rb matches expected output for on.json 1`] = `
"1 while true

1 while true

while super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

while super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

1 until true

1 until true

until super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until super_super_super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end
"
`;

exports[`yield.rb matches expected output for off.json 1`] = `
"[1, 2, 3].each do |i|
  yield
  yield i

  yield (i)

  yield i, 2

  yield (i, 2)
  yield
end
"
`;

exports[`yield.rb matches expected output for on.json 1`] = `
"[1, 2, 3].each do |i|
  yield
  yield i

  yield (i)

  yield i, 2

  yield (i, 2)
  yield
end
"
`;
